#include "test_util.hpp"

// clang-format off

ASM_TEST(AsmSample, 1,
    R"(
      .text
      addi $a0, $a0, 1
    )",
    "00100000100001000000000000000001\n"
);

ASM_TEST(AsmSample, 2,
    R"(
      .text
      addi $a0, $a0, -1
    )",
    "00100000100001001111111111111111\n"
);

ASM_TEST(AsmSample, 3,
    R"(
      .text
      __builtin_memcpy_aligned_large:
          addi   $t7, $a2, -4
          blez  $t7, __builtin_memcpy_bytes
          lw    $t0, 0($a1)
          sw    $t0, 0($a0)
          addi  $a2, $a2, -4
          addiu $a1, $a1, 4
          addiu $a0, $a0, 4
          j     __builtin_memcpy_aligned_large
      __builtin_memcpy_bytes:
          beq   $a2, $zero, __builtin_memcpy_return
          lbu   $t0, 0($a1)
          sb    $t0, 0($a0)
          addi  $a2, $a2, -1
          addiu $a1, $a1, 1
          addiu $a0, $a0, 1
          j     __builtin_memcpy_bytes
      __builtin_memcpy_return:
          jr    $ra
      __builtin_memcpy:
          addi   $t7, $a2, -4
          blez  $t7, __builtin_memcpy_bytes
          xor   $t8, $a0, $a1
          andi  $t8, $t0, 3
          subu  $t1, $zero, $a0
          andi  $t1, $t1, 3
      __builtin_memcpy_prepare:
          beq  $t1, $zero, __builtin_memcpy_check
          lbu   $t0, 0($a1)
          sb    $t0, 0($a0)
          addi  $a2, $a2, -1
          addi  $t1, $t1, -1
          addiu $a1, $a1, 1
          addiu $a0, $a0, 1
          j     __builtin_memcpy_prepare
      __builtin_memcpy_check:
          beq  $t8, $zero, __builtin_memcpy_aligned_large
      __builtin_memcpy_unaligned_large:
          addi   $t7, $a2, -4
          blez  $t7, __builtin_memcpy_bytes
          lwl   $t0, 0($a1)
          lwr   $t0, 1($a1)
          sw    $t0, 0($a0)
          addi  $a2, $a2, -4
          addiu $a1, $a1, 4
          addiu $a0, $a0, 4
          j      __builtin_memcpy_unaligned_large
    )",
    "00100000110011111111111111111100\n"
    "00011001111000000000000000000110\n"
    "10001100101010000000000000000000\n"
    "10101100100010000000000000000000\n"
    "00100000110001101111111111111100\n"
    "00100100101001010000000000000100\n"
    "00100100100001000000000000000100\n"
    "00001000000100000000000000000000\n"
    "00010000110000000000000000000110\n"
    "10010000101010000000000000000000\n"
    "10100000100010000000000000000000\n"
    "00100000110001101111111111111111\n"
    "00100100101001010000000000000001\n"
    "00100100100001000000000000000001\n"
    "00001000000100000000000000001000\n"
    "00000011111000000000000000001000\n"
    "00100000110011111111111111111100\n"
    "00011001111000001111111111110110\n"
    "00000000100001011100000000100110\n"
    "00110001000110000000000000000011\n"
    "00000000000001000100100000100011\n"
    "00110001001010010000000000000011\n"
    "00010001001000000000000000000111\n"
    "10010000101010000000000000000000\n"
    "10100000100010000000000000000000\n"
    "00100000110001101111111111111111\n"
    "00100001001010011111111111111111\n"
    "00100100101001010000000000000001\n"
    "00100100100001000000000000000001\n"
    "00001000000100000000000000010110\n"
    "00010011000000001111111111100001\n"
    "00100000110011111111111111111100\n"
    "00011001111000001111111111100111\n"
    "10001000101010000000000000000000\n"
    "10011000101010000000000000000001\n"
    "10101100100010000000000000000000\n"
    "00100000110001101111111111111100\n"
    "00100100101001010000000000000100\n"
    "00100100100001000000000000000100\n"
    "00001000000100000000000000011111\n"
);

ASM_TEST(AsmSample, 4,
    R"(
      A: # comment
      addi $t0, $t0, 0
      addi $t0, $t0, 0
      addi $t0, $t0, 0
      B:
      # comment
      # comment
      j D # comment
      addi $t0, $t0, 0
      addi $t0, $t0, 0

      bne $s0, $t0, D
      addi $t0, $t0, 0

      addi $t0, $t0, 0

      C: addi $t0, $t0, 0
      addi $t0, $t0, 0

      D: j A
      beq $s0, $t0, D
      j C
    )",
    "00100001000010000000000000000000\n"
    "00100001000010000000000000000000\n"
    "00100001000010000000000000000000\n"
    "00001000000100000000000000001011\n"
    "00100001000010000000000000000000\n"
    "00100001000010000000000000000000\n"
    "00010110000010000000000000000100\n"
    "00100001000010000000000000000000\n"
    "00100001000010000000000000000000\n"
    "00100001000010000000000000000000\n"
    "00100001000010000000000000000000\n"
    "00001000000100000000000000000000\n"
    "00010010000010001111111111111110\n"
    "00001000000100000000000000001001\n"
);

ASM_TEST(AsmSample, 5,
    R"(
      .text
      add $t0, $t0, $t2
      addi $t0, $t0, 0
      sub $t8, $s7, $t9
      addu $t0, $s3, $a2
      addiu $v0, $v0, 8
    )",
    "00000001000010100100000000100000\n"
    "00100001000010000000000000000000\n"
    "00000010111110011100000000100010\n"
    "00000010011001100100000000100001\n"
    "00100100010000100000000000001000\n"
);

ASM_TEST(AsmSample, 6,
    R"(
      .text
      mult $a0, $a1
      mfhi $t9
      mflo $t8
      div $v0, $v1
    )",
    "00000000100001010000000000011000\n"
    "00000000000000001100100000010000\n"
    "00000000000000001100000000010010\n"
    "00000000010000110000000000011010\n"
);

ASM_TEST(AsmSample, 7,
    R"(
      .text
      lw $t1, -400($fp)
      lw $t2, 400($fp)
      lw $t3, 0($fp)
      sw $t1, -400($fp)
      sw $t2, 400($fp)
      sw $t3, 0($fp)
      lwl $t1, -401($fp)
      lwr $t2, 403($fp)
      swl $t3, 1($fp)
      swr $t3, -1($fp)
      lb  $t0, -5($gp)
      sb  $t0, -11560($gp)
    )",
    "10001111110010011111111001110000\n"
    "10001111110010100000000110010000\n"
    "10001111110010110000000000000000\n"
    "10101111110010011111111001110000\n"
    "10101111110010100000000110010000\n"
    "10101111110010110000000000000000\n"
    "10001011110010011111111001101111\n"
    "10011011110010100000000110010011\n"
    "10101011110010110000000000000001\n"
    "10111011110010111111111111111111\n"
    "10000011100010001111111111111011\n"
    "10100011100010001101001011011000\n"
);

ASM_TEST(AsmSample, 8,
    R"(
      .text
      sll $a0, $t0, 1
      sra $a0, $t0, 9
      srl $a0, $t0, 10
      sllv $a0, $a1, $t0
      srav $a0, $a1, $t0
      srlv $a0, $a1, $t0
    )",
    "00000000000010000010000001000000\n"
    "00000000000010000010001001000011\n"
    "00000000000010000010001010000010\n"
    "00000001000001010010000000000100\n"
    "00000001000001010010000000000111\n"
    "00000001000001010010000000000110\n"
);

ASM_TEST(AsmSample, 9,
    R"(
      .text
      and $a0, $a1, $a3
      andi $a0, $a1, 15
      nor $s7, $s0, $t8
      or  $a0, $a2, $a3
      ori  $a0, $a2, 8
      xor  $a0, $a2, $a3
      xori  $a0, $a2, 8
    )",
    "00000000101001110010000000100100\n"
    "00110000101001000000000000001111\n"
    "00000010000110001011100000100111\n"
    "00000000110001110010000000100101\n"
    "00110100110001000000000000001000\n"
    "00000000110001110010000000100110\n"
    "00111000110001000000000000001000\n"
);

ASM_TEST(AsmSample, 10,
    R"(
      .text
      slt $a3, $a1, $a2
      slti $s0, $s1, 5
      sltiu $s0, $s1, 7
      sltu $s0, $s1, $s2
    )",
    "00000000101001100011100000101010\n"
    "00101010001100000000000000000101\n"
    "00101110001100000000000000000111\n"
    "00000010001100101000000000101011\n"
);

ASM_TEST(AsmSample, 11,
    R"(
      .text
      target:
      addi $v0, $zero, 111
      addi $a0, $zero, 0
      syscall
      addi $v0, $zero, 17
      addi $a0, $zero, 0
      syscall
      j target
    )",
    "00100000000000100000000001101111\n"
    "00100000000001000000000000000000\n"
    "00000000000000000000000000001100\n"
    "00100000000000100000000000010001\n"
    "00100000000001000000000000000000\n"
    "00000000000000000000000000001100\n"
    "00001000000100000000000000000000\n"
);

ASM_TEST(AsmSample, 12,
    R"(
      .text
      fibonacci:
      addi $sp, $sp, -12
      sw $ra, 8($sp)
      sw $s0, 4($sp)
      sw $s1, 0($sp)
      add $s0, $a0, $zero
      addi $v0, $zero, 1
      slti $t7, $s0, 2
      bne $t7, $zero, fibonacciExit
      addi $a0, $s0, -1
      jal fibonacci
      add $s1, $zero, $v0
      addi $a0, $s0, -2
      jal fibonacci
      add $v0, $s1, $v0
      fibonacciExit:
      lw $ra, 8($sp)
      lw $s0, 4($sp)
      lw $s1, 0($sp)
      addi $sp, $sp, 12
      jr $ra
    )",
    "00100011101111011111111111110100\n"
    "10101111101111110000000000001000\n"
    "10101111101100000000000000000100\n"
    "10101111101100010000000000000000\n"
    "00000000100000001000000000100000\n"
    "00100000000000100000000000000001\n"
    "00101010000011110000000000000010\n"
    "00010101111000000000000000000110\n"
    "00100010000001001111111111111111\n"
    "00001100000100000000000000000000\n"
    "00000000000000101000100000100000\n"
    "00100010000001001111111111111110\n"
    "00001100000100000000000000000000\n"
    "00000010001000100001000000100000\n"
    "10001111101111110000000000001000\n"
    "10001111101100000000000000000100\n"
    "10001111101100010000000000000000\n"
    "00100011101111010000000000001100\n"
    "00000011111000000000000000001000\n"
);

// clang-format on
